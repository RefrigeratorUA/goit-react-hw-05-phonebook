{"version":3,"sources":["components/Button/Button.js","components/Card/Card.js","components/AddInfoNav/AddInfoNav.js","components/AddInfo/AddInfo.js","views/MovieDetailsPage.js","services/themoviedb-api.js","images/image-not-found.svg"],"names":["Button","onClick","type","className","Card","movie","title","poster_path","vote_average","overview","genres","src","BASE_IMG_URL","ImgNotFound","alt","length","map","gender","index","name","withRouter","url","location","exact","to","pathname","routes","cast","state","from","activeClassName","reviews","Cast","lazy","Reviews","AddInfo","path","component","MovieDetailsPage","locationFrom","isLoading","handleButtonBack","history","props","push","home","this","setState","match","params","movieId","fetchMovieByID","then","finally","Loader","Component","API_KEY","BASE_URL","URL_POPULAR","URL_ID","URL_QUERY","fetchPopularMovies","Axios","get","page","api_key","data","results","catch","error","id","language","fetchCreditsMovie","fetchReviewsMovie","fetchMoviesByQuery","query","include_adult"],"mappings":"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","file":"static/js/details-page.3a25d035.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst Button = ({ onClick }) => {\n  return (\n    <button type=\"button\" className=\"Button\" onClick={() => onClick()}>\n      Back\n    </button>\n  );\n};\n\nButton.propTypes = {\n  onClick: PropTypes.func,\n};\n\nexport default Button;\n","import { BASE_IMG_URL } from '../../services/themoviedb-api';\nimport ImgNotFound from '../../images/image-not-found.svg';\nimport PropTypes from 'prop-types';\n\nconst Card = ({ movie }) => {\n  const {\n    title = 'Упс! Что пошло не так...',\n    poster_path = '',\n    vote_average = 0,\n    overview = '',\n    genres = [],\n  } = movie;\n  return (\n    <div className=\"Card\">\n      <h1>{title}</h1>\n      <img src={poster_path ? `${BASE_IMG_URL}${poster_path}` : ImgNotFound} alt={title} />\n      <p>User Score: {vote_average > 0 ? vote_average * 10 : 0}%</p>\n      <h2>Overview</h2>\n      <p>{overview}</p>\n      <h3>Genres</h3>\n      {genres.length > 0 && (\n        <ul>\n          {genres.map((gender, index) => (\n            <li key={index}>{gender.name}</li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nCard.propTypes = {\n  movie: PropTypes.object.isRequired,\n};\n\nexport default Card;\n","import { NavLink, withRouter } from 'react-router-dom';\nimport routes from '../../routes';\n\nfunction AddInfoNav({ url, location }) {\n  return (\n    <ul>\n      <li>\n        <NavLink\n          exact\n          to={{\n            pathname: `${url}${routes.cast}`,\n            state: {\n              from: location,\n            },\n          }}\n          className=\"NavLink\"\n          activeClassName=\"NavLink--active\"\n        >\n          Cast\n        </NavLink>\n      </li>\n      <li>\n        <NavLink\n          exact\n          to={{\n            pathname: `${url}${routes.reviews}`,\n            state: {\n              from: location,\n            },\n          }}\n          className=\"NavLink\"\n          activeClassName=\"NavLink--active\"\n        >\n          Reviews\n        </NavLink>\n      </li>\n    </ul>\n  );\n}\n\nexport default withRouter(AddInfoNav);\n","import PropTypes from 'prop-types';\nimport { Suspense, lazy } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport routes from '../../routes';\nimport AddInfoNav from '../AddInfoNav';\n\nconst Cast = lazy(() => import('../Cast' /* webpackChunkName: \"cast\" */));\nconst Reviews = lazy(() => import('../Reviews' /* webpackChunkName: \"reviews\" */));\n\nconst AddInfo = ({ url, path }) => {\n  return (\n    <>\n      <h4>Additional information</h4>\n      <AddInfoNav url={url} />\n      <Suspense>\n        <Switch>\n          <Route path={`${path}${routes.cast}`} component={Cast} />\n          <Route path={`${path}${routes.reviews}`} component={Reviews} />\n        </Switch>\n      </Suspense>\n    </>\n  );\n};\n\nAddInfo.propTypes = {\n  url: PropTypes.string,\n  path: PropTypes.string,\n};\n\nexport default AddInfo;\n","import { Component } from 'react';\nimport { fetchMovieByID } from '../services/themoviedb-api';\nimport routes from '../routes';\nimport Button from '../components/Button';\nimport Loader from '../components/Loader';\nimport Card from '../components/Card';\nimport AddInfo from '../components/AddInfo';\n\nclass MovieDetailsPage extends Component {\n  state = {\n    movie: {},\n    locationFrom: null,\n    isLoading: false,\n  };\n  async componentDidMount() {\n    this.setState({ isLoading: true });\n    const { location } = this.props;\n    // Когда я нажимаю на Cast или Reviews, то меняю history и location.\n    // Потом нужно неоднократно нажимать button BACK, что-бы на /movies вернуться\n    // Это костыль для BUTTON BACK )))\n    const locationFrom = location?.state?.from ? location.state.from : null;\n    this.setState({ locationFrom });\n\n    if (this.props.match?.params?.movieId) {\n      const {\n        match: {\n          params: { movieId },\n        },\n      } = this.props;\n      await fetchMovieByID(movieId)\n        .then(movie => this.setState({ movie }))\n        .finally(() => this.setState({ isLoading: false }));\n    }\n  }\n\n  handleButtonBack = () => {\n    const { history } = this.props;\n    const { locationFrom } = this.state;\n    history.push(locationFrom || routes.home);\n  };\n\n  render() {\n    const { match } = this.props;\n    const { movie, isLoading } = this.state;\n    return (\n      <>\n        {movie && (\n          <div className=\"Container\">\n            <hr />\n            <Button onClick={this.handleButtonBack} />\n            {isLoading ? (\n              <Loader />\n            ) : (\n              <>\n                <Card movie={this.state.movie} />\n                <AddInfo url={match.url} path={match.path} />\n              </>\n            )}\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\nexport default MovieDetailsPage;\n","import Axios from 'axios';\n\nconst API_KEY = '8add86c956039dd3121ecd9270a2bde1';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst URL_POPULAR = `${BASE_URL}trending/movie/day`;\nconst URL_ID = `${BASE_URL}movie/`;\nconst URL_QUERY = `${BASE_URL}search/movie`;\n\nconst BASE_IMG_URL = 'https://image.tmdb.org/t/p/original/';\n\nfunction fetchPopularMovies() {\n  return Axios.get(`${URL_POPULAR}`, {\n    params: { page: 1, api_key: API_KEY },\n  })\n    .then(({ data: { results } }) => results)\n    .catch(error => error);\n}\n\nfunction fetchMovieByID(id) {\n  return Axios.get(`${URL_ID}${id}`, {\n    params: { api_key: API_KEY, language: 'en-US' },\n  })\n    .then(({ data }) => data)\n    .catch(error => error);\n}\n\nfunction fetchCreditsMovie(id) {\n  return Axios.get(`${URL_ID}${id}/credits`, {\n    params: { api_key: API_KEY, language: 'en-US' },\n  })\n    .then(({ data: { cast } }) => cast)\n    .catch(error => error);\n}\n\nfunction fetchReviewsMovie(id) {\n  return Axios.get(`${URL_ID}${id}/reviews`, {\n    params: { page: 1, api_key: API_KEY, language: 'en-US' },\n  })\n    .then(({ data: { results } }) => results)\n    .catch(error => error);\n}\n\nfunction fetchMoviesByQuery(query) {\n  return Axios.get(`${URL_QUERY}`, {\n    params: { page: 1, api_key: API_KEY, language: 'en-US', include_adult: true, query: query },\n  })\n    .then(({ data: { results } }) => results)\n    .catch(error => error);\n}\n\nexport {\n  fetchPopularMovies,\n  fetchMovieByID,\n  fetchCreditsMovie,\n  fetchReviewsMovie,\n  fetchMoviesByQuery,\n  BASE_IMG_URL,\n};\n","export default __webpack_public_path__ + \"static/media/image-not-found.da4174d9.svg\";"],"sourceRoot":""}